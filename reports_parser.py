#!/usr/bin/env python
"""
Read eewvs-reports* files generated by the reporter programs.
Format (all in one line):
catalog event:
|0-------|1----------------|2--------------|3-------|4--------|5----|6--------|
;publicid;origin time (str);origin time (s);latitude;longitude;depth;magnitude

first estimate:
|7---------------------- --|8--------------|9-------|10-------|11---|
;timestamp (first estimate);origin time (s);latitude;longitude;depth;
|12----------------|13---------------|
estimated magnitude;guessed magnitude;

last estimate:
|14-------------------- --|15-------------|16------|17-------|18---|
;timestamp (last estimate);origin time (s);latitude;longitude;depth;
|19----------------|20---------------|21-------------|
estimated magnitude;guessed magnitude;report filename

Created on Jun 26, 2012
Last modified on Nov 26, 2012

@author: behry
"""
import os
import sys
import numpy as np
from obspy.core import UTCDateTime

class ReportsParser:
    def __init__(self, dmin=UTCDateTime(0), dmax=UTCDateTime()):
        self.correct = []
        self.missed = []
        self.false = []
        self.dmin = dmin
        self.dmax = dmax
        self.sfilter = lambda x, y: np.ones(y.size, dtype=np.bool)

    def read_reports(self, fin):
        f = open(fin)
        for _l in f.readlines():
            _l = _l.rstrip()
            a = _l.split(';')
            ignore, pid, ot, ots, lat, lon, dep, mag, ts1, ot1, lat1, lon1, \
            dep1, mage1, magg1, ts2, ot2, lat2, lon2, dep2, \
            mage2, magg2, fn = a
            if _l.startswith('miss'):
                self.missed.append(a[1::])
            elif _l.startswith('found'):
                self.correct.append(a[1::])
            elif _l.startswith('nope'):
                self.false.append(a[1::])
            elif _l.startswith('duplicate'):
                pass
            else:
                print "Line starts with wrong key word."
                print _l
                sys.exit(1)
        f.close()

    def spatial_filter(self, events, _ilat, _ilon, filterfunc):
        """
        Returns a set of epicenter locations filtered with respect to
        location.
        """
        lats = events[:, _ilat].astype('float')
        lons = events[:, _ilon].astype('float')
        idx = filterfunc(lons, lats)
        return events[idx]

    def time_filter(self, events, idate, tstart, tend):
        """
        Returns a set of epicenter locations filtered with respect to
        date.
        """
        dates = events[:, idate].astype('float')
        idx = np.where((dates >= tstart.timestamp) & \
                       (dates <= tend.timestamp))
        return events[idx]

    def magnitude_filter(self, events, imag, minmag, maxmag):
        """
        Returns a set of epicenter locations filtered with respect to
        mangitude.
        """
        mags = events[:, imag].astype('float')
        idx = np.where((mags >= minmag) & (mags < maxmag))
        return events[idx]

    def filter(self, events, ilat, ilon, imag, idate, mmin, mmax):
        out = None
        _ev0 = self.spatial_filter(events, ilat, ilon, self.sfilter)
        if _ev0.shape[0] > 0:
            _ev1 = self.time_filter(_ev0, idate, self.dmin, self.dmax)
            if _ev1.shape[0] > 0:
                _ev2 = self.magnitude_filter(_ev1, imag, mmin, mmax)
                out = _ev2
        return out

    def get_correct(self, mmin=-10.0, mmax=10.0):
        correct = np.array(self.correct)
        return self.filter(correct, 3, 4, 6, 2, mmin, mmax)

    def get_missed(self, mmin=0.5, mmax=10.0):
        missed = np.array(self.missed)
        return self.filter(missed, 3, 4, 6, 2, mmin, mmax)

    def get_false(self, mmin=-10.0, mmax=10.0):
        false = np.array(self.false)
        return self.filter(false, 9, 10, 12, 8, mmin, mmax)

if __name__ == '__main__':
    from optparse import OptionParser
    parser = OptionParser()
    (opts, args) = parser.parse_args()
    if len(args) != 1:
        parser.error("incorrect number of arguments")
    # datadir = '/home/behry/workspace/eew_py/reports/data'
    # fin = os.path.join(datadir, 'eewvs-reports-us-nc-2012.csv')
    rp = ReportsParser()
    rp.read_reports(args[0])
    correct = rp.get_correct()
    false = rp.get_false()
    missed = rp.get_missed()
    for a in correct:
        pid, ot, ots, lat, lon, dep, mag, ts1, ot1, lat1, lon1, \
        dep1, mage1, magg1, ts2, ot2, lat2, lon2, dep2, \
        mage2, magg2, fn = a
        print '%f %f %f %s %s' % (float(lon), float(lat), float(mag), \
                                      ot, pid)
    print 'correct alerts: ', correct.shape[0]
    print 'missed alerts: ', missed.shape[0]
    print 'false alerts: ', false.shape[0]
    print correct.shape[0] + false.shape[0]
